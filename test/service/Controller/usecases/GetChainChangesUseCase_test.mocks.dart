// Mocks generated by Mockito 5.1.0 from annotations
// in ax_dapp/test/service/Controller/usecases/GetChainChangesUseCase_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:ax_dapp/service/Controller/createWallet/web.dart' as _i2;
import 'package:ax_dapp/service/Controller/usecases/GetChainChangesUseCase.dart'
    as _i5;
import 'package:flutter_web3/flutter_web3.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeWebWallet_0 extends _i1.Fake implements _i2.WebWallet {}

/// A class which mocks [WebWallet].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebWallet extends _i1.Mock implements _i2.WebWallet {
  MockWebWallet() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get mainRPCUrl =>
      (super.noSuchMethod(Invocation.getter(#mainRPCUrl), returnValue: '')
          as String);
  @override
  set mainRPCUrl(String? _mainRPCUrl) =>
      super.noSuchMethod(Invocation.setter(#mainRPCUrl, _mainRPCUrl),
          returnValueForMissingStub: null);
  @override
  String get testRPCUrl =>
      (super.noSuchMethod(Invocation.getter(#testRPCUrl), returnValue: '')
          as String);
  @override
  set testRPCUrl(String? _testRPCUrl) =>
      super.noSuchMethod(Invocation.setter(#testRPCUrl, _testRPCUrl),
          returnValueForMissingStub: null);
  @override
  set ethereum(_i3.Ethereum? _ethereum) =>
      super.noSuchMethod(Invocation.setter(#ethereum, _ethereum),
          returnValueForMissingStub: null);
  @override
  set activeChainId(dynamic _activeChainId) =>
      super.noSuchMethod(Invocation.setter(#activeChainId, _activeChainId),
          returnValueForMissingStub: null);
  @override
  set publicAddress(dynamic _publicAddress) =>
      super.noSuchMethod(Invocation.setter(#publicAddress, _publicAddress),
          returnValueForMissingStub: null);
  @override
  set credentials(dynamic _credentials) =>
      super.noSuchMethod(Invocation.setter(#credentials, _credentials),
          returnValueForMissingStub: null);
  @override
  set networkID(dynamic _networkID) =>
      super.noSuchMethod(Invocation.setter(#networkID, _networkID),
          returnValueForMissingStub: null);
  @override
  set mnemonic(dynamic _mnemonic) =>
      super.noSuchMethod(Invocation.setter(#mnemonic, _mnemonic),
          returnValueForMissingStub: null);
  @override
  set seedHex(dynamic _seedHex) =>
      super.noSuchMethod(Invocation.setter(#seedHex, _seedHex),
          returnValueForMissingStub: null);
  @override
  set client(dynamic _client) =>
      super.noSuchMethod(Invocation.setter(#client, _client),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> connect() =>
      (super.noSuchMethod(Invocation.method(#connect, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
  @override
  _i4.Future<bool> addTokenToWallet(String? tokenAddress, String? tokenImage) =>
      (super.noSuchMethod(
          Invocation.method(#addTokenToWallet, [tokenAddress, tokenImage]),
          returnValue: Future<bool>.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<void> switchNetwork() =>
      (super.noSuchMethod(Invocation.method(#switchNetwork, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i4.Future<void>);
}

/// A class which mocks [GetChainChangesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetChainChangesUseCase extends _i1.Mock
    implements _i5.GetChainChangesUseCase {
  MockGetChainChangesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WebWallet get webWallet =>
      (super.noSuchMethod(Invocation.getter(#webWallet),
          returnValue: _FakeWebWallet_0()) as _i2.WebWallet);
  @override
  set ethereum(_i3.Ethereum? _ethereum) =>
      super.noSuchMethod(Invocation.setter(#ethereum, _ethereum),
          returnValueForMissingStub: null);
  @override
  _i4.Stream<dynamic> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
          returnValue: Stream<dynamic>.empty()) as _i4.Stream<dynamic>);
  @override
  void subscribeToChainChanged() =>
      super.noSuchMethod(Invocation.method(#subscribeToChainChanged, []),
          returnValueForMissingStub: null);
  @override
  void printChainChanged(dynamic chainId) =>
      super.noSuchMethod(Invocation.method(#printChainChanged, [chainId]),
          returnValueForMissingStub: null);
  @override
  void addCurrentChainToStream(int? chainId) =>
      super.noSuchMethod(Invocation.method(#addCurrentChainToStream, [chainId]),
          returnValueForMissingStub: null);
}
