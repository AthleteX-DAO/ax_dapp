// Mocks generated by Mockito 5.1.0 from annotations
// in ax_dapp/test/scout_athlete_data_use_case_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:ax_dapp/repositories/SportsRepo.dart' as _i2;
import 'package:ax_dapp/service/athleteModels/mlb/MLBAthlete.dart' as _i5;
import 'package:ax_dapp/util/SupportedSports.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

/// A class which mocks [SportsRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockSportsRepo<SportAthlete> extends _i1.Mock
    implements _i2.SportsRepo<SportAthlete> {
  MockSportsRepo() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.SupportedSport get sport => (super.noSuchMethod(Invocation.getter(#sport),
      returnValue: _i3.SupportedSport.ALL) as _i3.SupportedSport);
  @override
  _i4.Future<List<SportAthlete>> getAllPlayers() =>
      (super.noSuchMethod(Invocation.method(#getAllPlayers, []),
              returnValue: Future<List<SportAthlete>>.value(<SportAthlete>[]))
          as _i4.Future<List<SportAthlete>>);
  @override
  _i4.Future<List<SportAthlete>> getPlayersById(List<int>? ids) =>
      (super.noSuchMethod(Invocation.method(#getPlayersById, [ids]),
              returnValue: Future<List<SportAthlete>>.value(<SportAthlete>[]))
          as _i4.Future<List<SportAthlete>>);
  @override
  _i4.Future<List<SportAthlete>> getSupportedPlayers() =>
      (super.noSuchMethod(Invocation.method(#getSupportedPlayers, []),
              returnValue: Future<List<SportAthlete>>.value(<SportAthlete>[]))
          as _i4.Future<List<SportAthlete>>);
  @override
  _i4.Future<SportAthlete> getPlayer(int? id) =>
      (super.noSuchMethod(Invocation.method(#getPlayer, [id]),
              returnValue: Future<SportAthlete>.value(null))
          as _i4.Future<SportAthlete>);
  @override
  _i4.Future<List<SportAthlete>> getPlayersByTeam(String? team) =>
      (super.noSuchMethod(Invocation.method(#getPlayersByTeam, [team]),
              returnValue: Future<List<SportAthlete>>.value(<SportAthlete>[]))
          as _i4.Future<List<SportAthlete>>);
  @override
  _i4.Future<List<SportAthlete>> getPlayersByPosition(String? position) =>
      (super.noSuchMethod(Invocation.method(#getPlayersByPosition, [position]),
              returnValue: Future<List<SportAthlete>>.value(<SportAthlete>[]))
          as _i4.Future<List<SportAthlete>>);
  @override
  _i4.Future<List<SportAthlete>> getPlayersByTeamAtPosition(
          String? team, String? position) =>
      (super.noSuchMethod(
              Invocation.method(#getPlayersByTeamAtPosition, [team, position]),
              returnValue: Future<List<SportAthlete>>.value(<SportAthlete>[]))
          as _i4.Future<List<SportAthlete>>);
  @override
  _i4.Future<dynamic> getPlayerStatsHistory(int? id) =>
      (super.noSuchMethod(Invocation.method(#getPlayerStatsHistory, [id]),
          returnValue: Future<dynamic>.value()) as _i4.Future<dynamic>);
}

/// A class which mocks [MLBAthlete].
///
/// See the documentation for Mockito's code generation for more information.
class MockMLBAthlete extends _i1.Mock implements _i5.MLBAthlete {
  MockMLBAthlete() {
    _i1.throwOnMissingStub(this);
  }

  @override
  double get started =>
      (super.noSuchMethod(Invocation.getter(#started), returnValue: 0.0)
          as double);
  @override
  double get games =>
      (super.noSuchMethod(Invocation.getter(#games), returnValue: 0.0)
          as double);
  @override
  double get atBats =>
      (super.noSuchMethod(Invocation.getter(#atBats), returnValue: 0.0)
          as double);
  @override
  double get runs =>
      (super.noSuchMethod(Invocation.getter(#runs), returnValue: 0.0)
          as double);
  @override
  double get singles =>
      (super.noSuchMethod(Invocation.getter(#singles), returnValue: 0.0)
          as double);
  @override
  double get triples =>
      (super.noSuchMethod(Invocation.getter(#triples), returnValue: 0.0)
          as double);
  @override
  double get homeRuns =>
      (super.noSuchMethod(Invocation.getter(#homeRuns), returnValue: 0.0)
          as double);
  @override
  double get inningsPlayed =>
      (super.noSuchMethod(Invocation.getter(#inningsPlayed), returnValue: 0.0)
          as double);
  @override
  double get battingAverage =>
      (super.noSuchMethod(Invocation.getter(#battingAverage), returnValue: 0.0)
          as double);
  @override
  double get outs =>
      (super.noSuchMethod(Invocation.getter(#outs), returnValue: 0.0)
          as double);
  @override
  double get walks =>
      (super.noSuchMethod(Invocation.getter(#walks), returnValue: 0.0)
          as double);
  @override
  double get errors =>
      (super.noSuchMethod(Invocation.getter(#errors), returnValue: 0.0)
          as double);
  @override
  double get saves =>
      (super.noSuchMethod(Invocation.getter(#saves), returnValue: 0.0)
          as double);
  @override
  double get strikeOuts =>
      (super.noSuchMethod(Invocation.getter(#strikeOuts), returnValue: 0.0)
          as double);
  @override
  double get stolenBases =>
      (super.noSuchMethod(Invocation.getter(#stolenBases), returnValue: 0.0)
          as double);
  @override
  double get plateAppearances => (super
          .noSuchMethod(Invocation.getter(#plateAppearances), returnValue: 0.0)
      as double);
  @override
  double get weightedOnBasePercentage =>
      (super.noSuchMethod(Invocation.getter(#weightedOnBasePercentage),
          returnValue: 0.0) as double);
  @override
  int get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: 0) as int);
  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  String get team =>
      (super.noSuchMethod(Invocation.getter(#team), returnValue: '') as String);
  @override
  String get position =>
      (super.noSuchMethod(Invocation.getter(#position), returnValue: '')
          as String);
  @override
  double get price =>
      (super.noSuchMethod(Invocation.getter(#price), returnValue: 0.0)
          as double);
  @override
  String get timeStamp =>
      (super.noSuchMethod(Invocation.getter(#timeStamp), returnValue: '')
          as String);
  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
}
