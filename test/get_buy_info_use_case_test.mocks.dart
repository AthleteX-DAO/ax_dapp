// Mocks generated by Mockito 5.3.0 from annotations
// in ax_dapp/test/get_buy_info_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:ax_dapp/repositories/subgraph/usecases/get_swap_info_use_case.dart'
    as _i5;
import 'package:ethereum_api/tokens_api.dart' as _i3;
import 'package:fpdart/fpdart.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tokens_repository/src/models/models.dart' as _i4;
import 'package:tokens_repository/src/tokens_repository.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeToken_1 extends _i1.SmartFake implements _i3.Token {
  _FakeToken_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeAptPair_2 extends _i1.SmartFake implements _i3.AptPair {
  _FakeAptPair_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeBigInt_3 extends _i1.SmartFake implements BigInt {
  _FakeBigInt_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeAxMarketData_4 extends _i1.SmartFake implements _i4.AxMarketData {
  _FakeAxMarketData_4(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [GetSwapInfoUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSwapInfoUseCase extends _i1.Mock
    implements _i5.GetSwapInfoUseCase {
  MockGetSwapInfoUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i5.Success, _i5.Error>> fetchSwapInfo(
          {String? tokenFrom,
          String? tokenTo,
          double? fromInput,
          double? slippage}) =>
      (super.noSuchMethod(
          Invocation.method(#fetchSwapInfo, [], {
            #tokenFrom: tokenFrom,
            #tokenTo: tokenTo,
            #fromInput: fromInput,
            #slippage: slippage
          }),
          returnValue: _i6.Future<_i2.Either<_i5.Success, _i5.Error>>.value(
              _FakeEither_0<_i5.Success, _i5.Error>(
                  this,
                  Invocation.method(#fetchSwapInfo, [], {
                    #tokenFrom: tokenFrom,
                    #tokenTo: tokenTo,
                    #fromInput: fromInput,
                    #slippage: slippage
                  })))) as _i6.Future<_i2.Either<_i5.Success, _i5.Error>>);
}

/// A class which mocks [TokensRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTokensRepository extends _i1.Mock implements _i7.TokensRepository {
  MockTokensRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Stream<List<_i3.Token>> get tokensChanges =>
      (super.noSuchMethod(Invocation.getter(#tokensChanges),
              returnValue: _i6.Stream<List<_i3.Token>>.empty())
          as _i6.Stream<List<_i3.Token>>);
  @override
  List<_i3.Token> get currentTokens =>
      (super.noSuchMethod(Invocation.getter(#currentTokens),
          returnValue: <_i3.Token>[]) as List<_i3.Token>);
  @override
  List<_i3.Token> get previousTokens =>
      (super.noSuchMethod(Invocation.getter(#previousTokens),
          returnValue: <_i3.Token>[]) as List<_i3.Token>);
  @override
  _i6.Stream<List<_i3.Apt>> get aptsChanges =>
      (super.noSuchMethod(Invocation.getter(#aptsChanges),
              returnValue: _i6.Stream<List<_i3.Apt>>.empty())
          as _i6.Stream<List<_i3.Apt>>);
  @override
  List<_i3.Apt> get currentApts =>
      (super.noSuchMethod(Invocation.getter(#currentApts),
          returnValue: <_i3.Apt>[]) as List<_i3.Apt>);
  @override
  List<_i3.Apt> get previousApts =>
      (super.noSuchMethod(Invocation.getter(#previousApts),
          returnValue: <_i3.Apt>[]) as List<_i3.Apt>);
  @override
  _i6.Stream<_i3.Token> get axtChanges =>
      (super.noSuchMethod(Invocation.getter(#axtChanges),
          returnValue: _i6.Stream<_i3.Token>.empty()) as _i6.Stream<_i3.Token>);
  @override
  _i3.Token get currentAxt =>
      (super.noSuchMethod(Invocation.getter(#currentAxt),
              returnValue: _FakeToken_1(this, Invocation.getter(#currentAxt)))
          as _i3.Token);
  @override
  _i6.Stream<_i3.AptPair> aptPairChanges(int? athleteId) => (super.noSuchMethod(
      Invocation.method(#aptPairChanges, [athleteId]),
      returnValue: _i6.Stream<_i3.AptPair>.empty()) as _i6.Stream<_i3.AptPair>);
  @override
  _i3.AptPair currentAptPair(int? athleteId) =>
      (super.noSuchMethod(Invocation.method(#currentAptPair, [athleteId]),
              returnValue: _FakeAptPair_2(
                  this, Invocation.method(#currentAptPair, [athleteId])))
          as _i3.AptPair);
  @override
  void switchTokens(_i3.EthereumChain? chain) =>
      super.noSuchMethod(Invocation.method(#switchTokens, [chain]),
          returnValueForMissingStub: null);
  @override
  _i6.Future<BigInt> getCollateralPerPair() =>
      (super.noSuchMethod(Invocation.method(#getCollateralPerPair, []),
              returnValue: _i6.Future<BigInt>.value(_FakeBigInt_3(
                  this, Invocation.method(#getCollateralPerPair, []))))
          as _i6.Future<BigInt>);
  @override
  _i6.Future<_i4.AxMarketData> getAxMarketData() => (super.noSuchMethod(
          Invocation.method(#getAxMarketData, []),
          returnValue: _i6.Future<_i4.AxMarketData>.value(_FakeAxMarketData_4(
              this, Invocation.method(#getAxMarketData, []))))
      as _i6.Future<_i4.AxMarketData>);
  @override
  _i6.Future<String> getTokenSymbol(String? tokenAddress) =>
      (super.noSuchMethod(Invocation.method(#getTokenSymbol, [tokenAddress]),
          returnValue: _i6.Future<String>.value('')) as _i6.Future<String>);
}
