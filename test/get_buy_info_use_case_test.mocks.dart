// Mocks generated by Mockito 5.2.0 from annotations
// in ax_dapp/test/get_buy_info_use_case_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;

import 'package:ax_dapp/repositories/subgraph/usecases/get_swap_info_use_case.dart'
    as _i4;
import 'package:ethereum_api/ethereum_api.dart' as _i3;
import 'package:fpdart/fpdart.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:tokens_repository/src/tokens_repository.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeToken_1 extends _i1.Fake implements _i3.Token {}

class _FakeAptPair_2 extends _i1.Fake implements _i3.AptPair {}

/// A class which mocks [GetSwapInfoUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetSwapInfoUseCase extends _i1.Mock
    implements _i4.GetSwapInfoUseCase {
  MockGetSwapInfoUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Either<_i4.Success, _i4.Error>> fetchSwapInfo(
          {String? tokenFrom,
          String? tokenTo,
          double? fromInput,
          double? slippage}) =>
      (super.noSuchMethod(
              Invocation.method(#fetchSwapInfo, [], {
                #tokenFrom: tokenFrom,
                #tokenTo: tokenTo,
                #fromInput: fromInput,
                #slippage: slippage
              }),
              returnValue: Future<_i2.Either<_i4.Success, _i4.Error>>.value(
                  _FakeEither_0<_i4.Success, _i4.Error>()))
          as _i5.Future<_i2.Either<_i4.Success, _i4.Error>>);
}

/// A class which mocks [TokensRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTokensRepository extends _i1.Mock implements _i6.TokensRepository {
  MockTokensRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<List<_i3.Token>> get tokensChanges =>
      (super.noSuchMethod(Invocation.getter(#tokensChanges),
              returnValue: Stream<List<_i3.Token>>.empty())
          as _i5.Stream<List<_i3.Token>>);
  @override
  List<_i3.Token> get tokens => (super.noSuchMethod(Invocation.getter(#tokens),
      returnValue: <_i3.Token>[]) as List<_i3.Token>);
  @override
  _i5.Stream<List<_i3.Apt>> get aptsChanges => (super.noSuchMethod(
      Invocation.getter(#aptsChanges),
      returnValue: Stream<List<_i3.Apt>>.empty()) as _i5.Stream<List<_i3.Apt>>);
  @override
  List<_i3.Apt> get apts =>
      (super.noSuchMethod(Invocation.getter(#apts), returnValue: <_i3.Apt>[])
          as List<_i3.Apt>);
  @override
  _i5.Stream<_i3.Token> get chainTokenChanges =>
      (super.noSuchMethod(Invocation.getter(#chainTokenChanges),
          returnValue: Stream<_i3.Token>.empty()) as _i5.Stream<_i3.Token>);
  @override
  _i3.Token get chainToken =>
      (super.noSuchMethod(Invocation.getter(#chainToken),
          returnValue: _FakeToken_1()) as _i3.Token);
  @override
  _i5.Stream<_i3.AptPair> aptPairChanges(int? athleteId) =>
      (super.noSuchMethod(Invocation.method(#aptPairChanges, [athleteId]),
          returnValue: Stream<_i3.AptPair>.empty()) as _i5.Stream<_i3.AptPair>);
  @override
  _i3.AptPair aptPair(int? athleteId) =>
      (super.noSuchMethod(Invocation.method(#aptPair, [athleteId]),
          returnValue: _FakeAptPair_2()) as _i3.AptPair);
  @override
  void switchTokens(_i3.EthereumChain? chain) =>
      super.noSuchMethod(Invocation.method(#switchTokens, [chain]),
          returnValueForMissingStub: null);
}
