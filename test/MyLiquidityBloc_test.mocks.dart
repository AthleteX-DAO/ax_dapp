// Mocks generated by Mockito 5.1.0 from annotations
// in ax_dapp/test/MyLiquidityBloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i6;

import 'package:ax_dapp/pages/pool/MyLiqudity/models/MyLiquidityItemInfo.dart'
    as _i3;
import 'package:ax_dapp/repositories/subgraph/usecases/SubgraphError.dart'
    as _i7;
import 'package:ax_dapp/repositories/usecases/GetAllLiquidityInfoUseCase.dart'
    as _i5;
import 'package:ax_dapp/service/BlockchainModels/LiquidityPosition.dart' as _i8;
import 'package:ax_dapp/service/Controller/Controller.dart' as _i4;
import 'package:ax_dapp/service/Controller/usecases/GetWalletAddressUseCase.dart'
    as _i9;
import 'package:fpdart/fpdart.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

class _FakeLiquidityPositionInfo_1 extends _i1.Fake
    implements _i3.LiquidityPositionInfo {}

class _FakeController_2 extends _i1.Fake implements _i4.Controller {}

/// A class which mocks [GetAllLiquidityInfoUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllLiquidityInfoUseCase extends _i1.Mock
    implements _i5.GetAllLiquidityInfoUseCase {
  MockGetAllLiquidityInfoUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i5.Success, _i7.SubgraphError>>
      fetchAllLiquidityPositions({String? walletAddress}) => (super
              .noSuchMethod(
                  Invocation.method(#fetchAllLiquidityPositions, [], {
                    #walletAddress: walletAddress
                  }),
                  returnValue:
                      Future<_i2.Either<_i5.Success, _i7.SubgraphError>>.value(
                          _FakeEither_0<_i5.Success, _i7.SubgraphError>()))
          as _i6.Future<_i2.Either<_i5.Success, _i7.SubgraphError>>);
  @override
  _i3.LiquidityPositionInfo getMyLiquidityItemInfoFromLiquidityPosition(
          _i8.LiquidityPosition? liquidityPosition) =>
      (super.noSuchMethod(
              Invocation.method(#getMyLiquidityItemInfoFromLiquidityPosition,
                  [liquidityPosition]),
              returnValue: _FakeLiquidityPositionInfo_1())
          as _i3.LiquidityPositionInfo);
}

/// A class which mocks [GetWalletAddressUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWalletAddressUseCase extends _i1.Mock
    implements _i9.GetWalletAddressUseCase {
  MockGetWalletAddressUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Controller get controller =>
      (super.noSuchMethod(Invocation.getter(#controller),
          returnValue: _FakeController_2()) as _i4.Controller);
}
