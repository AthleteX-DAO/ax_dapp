// Mocks generated by Mockito 5.3.0 from annotations
// in ax_dapp/test/get_swap_info_use_case_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:ax_dapp/repositories/subgraph/usecases/get_pair_info_use_case.dart'
    as _i3;
import 'package:fpdart/fpdart.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [GetPairInfoUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPairInfoUseCase extends _i1.Mock
    implements _i3.GetPairInfoUseCase {
  MockGetPairInfoUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i3.Success, _i3.Error>> fetchPairInfo(
          {String? tokenA, String? tokenB, double? fromTokenInput}) =>
      (super.noSuchMethod(Invocation.method(#fetchPairInfo, [], {#tokenA: tokenA, #tokenB: tokenB, #fromTokenInput: fromTokenInput}),
          returnValue: _i4.Future<_i2.Either<_i3.Success, _i3.Error>>.value(_FakeEither_0<_i3.Success, _i3.Error>(
              this,
              Invocation.method(#fetchPairInfo, [], {
                #tokenA: tokenA,
                #tokenB: tokenB,
                #fromTokenInput: fromTokenInput
              })))) as _i4.Future<_i2.Either<_i3.Success, _i3.Error>>);
}
