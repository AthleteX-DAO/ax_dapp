// Mocks generated by Mockito 5.3.0 from annotations
// in ax_dapp/test/my_liquidity_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i7;

import 'package:ax_dapp/my_liquidity/models/models.dart' as _i3;
import 'package:ax_dapp/repositories/subgraph/usecases/subgraph_error.dart'
    as _i8;
import 'package:ax_dapp/repositories/usecases/get_all_liquidity_info_use_case.dart'
    as _i6;
import 'package:ax_dapp/service/blockchain_models/liquidity_position.dart'
    as _i9;
import 'package:ethereum_api/wallet_api.dart' as _i5;
import 'package:fpdart/fpdart.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:use_cases/src/stream_app_data_changes/models/models.dart'
    as _i12;
import 'package:use_cases/src/stream_app_data_changes/stream_app_data_changes_use_case.dart'
    as _i11;
import 'package:wallet_repository/src/models/models.dart' as _i4;
import 'package:wallet_repository/wallet_repository.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeLiquidityPositionInfo_1 extends _i1.SmartFake
    implements _i3.LiquidityPositionInfo {
  _FakeLiquidityPositionInfo_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeWallet_2 extends _i1.SmartFake implements _i4.Wallet {
  _FakeWallet_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeWalletCredentials_3 extends _i1.SmartFake
    implements _i5.WalletCredentials {
  _FakeWalletCredentials_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeBigInt_4 extends _i1.SmartFake implements BigInt {
  _FakeBigInt_4(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [GetAllLiquidityInfoUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllLiquidityInfoUseCase extends _i1.Mock
    implements _i6.GetAllLiquidityInfoUseCase {
  MockGetAllLiquidityInfoUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.Either<_i6.Success, _i8.SubgraphError>> fetchAllLiquidityPositions(
          {String? walletAddress}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #fetchAllLiquidityPositions, [], {#walletAddress: walletAddress}),
              returnValue: _i7.Future<_i2.Either<_i6.Success, _i8.SubgraphError>>.value(
                  _FakeEither_0<_i6.Success, _i8.SubgraphError>(
                      this, Invocation.method(#fetchAllLiquidityPositions, [], {#walletAddress: walletAddress}))))
          as _i7.Future<_i2.Either<_i6.Success, _i8.SubgraphError>>);
  @override
  _i3.LiquidityPositionInfo getMyLiquidityItemInfoFromLiquidityPosition(
          _i9.LiquidityPosition? liquidityPosition) =>
      (super.noSuchMethod(
          Invocation.method(#getMyLiquidityItemInfoFromLiquidityPosition,
              [liquidityPosition]),
          returnValue: _FakeLiquidityPositionInfo_1(
              this,
              Invocation.method(#getMyLiquidityItemInfoFromLiquidityPosition,
                  [liquidityPosition]))) as _i3.LiquidityPositionInfo);
}

/// A class which mocks [WalletRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWalletRepository extends _i1.Mock implements _i10.WalletRepository {
  MockWalletRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.EthereumChain get defaultChain =>
      (super.noSuchMethod(Invocation.getter(#defaultChain),
          returnValue: _i5.EthereumChain.none) as _i5.EthereumChain);
  @override
  _i7.Stream<_i5.EthereumChain> get chainChanges =>
      (super.noSuchMethod(Invocation.getter(#chainChanges),
              returnValue: _i7.Stream<_i5.EthereumChain>.empty())
          as _i7.Stream<_i5.EthereumChain>);
  @override
  _i5.EthereumChain get currentChain =>
      (super.noSuchMethod(Invocation.getter(#currentChain),
          returnValue: _i5.EthereumChain.none) as _i5.EthereumChain);
  @override
  _i7.Stream<_i4.Wallet> get walletChanges => (super.noSuchMethod(
      Invocation.getter(#walletChanges),
      returnValue: _i7.Stream<_i4.Wallet>.empty()) as _i7.Stream<_i4.Wallet>);
  @override
  _i4.Wallet get currentWallet => (super.noSuchMethod(
          Invocation.getter(#currentWallet),
          returnValue: _FakeWallet_2(this, Invocation.getter(#currentWallet)))
      as _i4.Wallet);
  @override
  _i5.WalletCredentials get credentials => (super.noSuchMethod(
          Invocation.getter(#credentials),
          returnValue:
              _FakeWalletCredentials_3(this, Invocation.getter(#credentials)))
      as _i5.WalletCredentials);
  @override
  _i7.Future<String> connectWallet() =>
      (super.noSuchMethod(Invocation.method(#connectWallet, []),
          returnValue: _i7.Future<String>.value('')) as _i7.Future<String>);
  @override
  _i7.Future<void> switchChain(_i5.EthereumChain? chain) => (super.noSuchMethod(
      Invocation.method(#switchChain, [chain]),
      returnValue: _i7.Future<void>.value(),
      returnValueForMissingStub: _i7.Future<void>.value()) as _i7.Future<void>);
  @override
  void disconnectWallet() =>
      super.noSuchMethod(Invocation.method(#disconnectWallet, []),
          returnValueForMissingStub: null);
  @override
  _i7.Future<void> addToken({String? tokenAddress, String? tokenImageUrl}) =>
      (super.noSuchMethod(
              Invocation.method(#addToken, [],
                  {#tokenAddress: tokenAddress, #tokenImageUrl: tokenImageUrl}),
              returnValue: _i7.Future<void>.value(),
              returnValueForMissingStub: _i7.Future<void>.value())
          as _i7.Future<void>);
  @override
  _i7.Future<BigInt> getRawTokenBalance(String? tokenAddress) => (super
          .noSuchMethod(Invocation.method(#getRawTokenBalance, [tokenAddress]),
              returnValue: _i7.Future<BigInt>.value(_FakeBigInt_4(this,
                  Invocation.method(#getRawTokenBalance, [tokenAddress]))))
      as _i7.Future<BigInt>);
  @override
  _i7.Future<double?> getTokenBalance(String? tokenAddress) =>
      (super.noSuchMethod(Invocation.method(#getTokenBalance, [tokenAddress]),
          returnValue: _i7.Future<double?>.value()) as _i7.Future<double?>);
  @override
  _i7.Future<double> getGasPrice() =>
      (super.noSuchMethod(Invocation.method(#getGasPrice, []),
          returnValue: _i7.Future<double>.value(0.0)) as _i7.Future<double>);
}

/// A class which mocks [StreamAppDataChangesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreamAppDataChangesUseCase extends _i1.Mock
    implements _i11.StreamAppDataChangesUseCase {
  MockStreamAppDataChangesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Stream<_i12.AppData> get appDataChanges =>
      (super.noSuchMethod(Invocation.getter(#appDataChanges),
              returnValue: _i7.Stream<_i12.AppData>.empty())
          as _i7.Stream<_i12.AppData>);
}
